<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Fiber Network Blog</title>
        <link>https://fiber.chainbound.io/blog</link>
        <description>Fiber Network Blog</description>
        <lastBuildDate>Thu, 23 Feb 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Fiber vs. Bloxroute: The Standoff]]></title>
            <link>https://fiber.chainbound.io/blog/fiber-vs-bloxroute</link>
            <guid>fiber-vs-bloxroute</guid>
            <pubDate>Thu, 23 Feb 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Source//www.pinterest.com/pin/567242515550180347]]></description>
            <content:encoded><![CDATA[<figure><img loading="lazy" src="https://i.pinimg.com/564x/ca/98/5e/ca985ebc3cfc605d9e0d314b807b8353.jpg" class="img_ev3q"><figcaption><sup>Source: https://www.pinterest.com/pin/567242515550180347</sup></figcaption></figure><h2 class="anchor anchorWithStickyNavbar_LWe7" id="introduction">Introduction<a class="hash-link" href="#introduction" title="Direct link to heading">​</a></h2><p>For the last few months, we’ve been working on a new implementation of Fiber on Ethereum. Fiber is a mempool service that consists of a network of highly optimized nodes. </p><p>Fiber is built with 3 pillars in mind:</p><ul><li>Reliability</li><li>(consistent) Performance</li><li>Resource-efficiency</li></ul><p>These pillars, and the fact that there’s now a new, modular execution client being built by Paradigm (<a href="https://github.com/paradigmxyz/reth" target="_blank" rel="noopener noreferrer">https://github.com/paradigmxyz/reth</a>) in Rust, made Rust the ideal candidate for the job. And so we set to work. A couple of months later now, and we’ve deployed the new version. </p><p>Bloxroute has been the de-facto mempool service for traders and searchers on Ethereum. Back in December 2020, KeeperDAO (now Rook) ran a <a href="https://medium.com/keeperdao/a-performance-benchmark-on-mempool-services-9e68bf070952" target="_blank" rel="noopener noreferrer">performance benchmark</a> on Bloxroute, Blocknative and a standard Alchemy node. They found that Bloxroute blew the other 2 out of the water: it delivered transactions first 97% of the time. Since then, there hasn’t really been any new competition, - we aim to change that.</p><p>Our <a href="https://github.com/chainbound/fiber-benchmarks" target="_blank" rel="noopener noreferrer">benchmarking tool</a> consistently shows Fiber seeing a transaction first about 80% of the time, with a median latency difference of 10-12 milliseconds. </p><p>This is the output of the last benchmarking run (1 hour)<sup id="fnref-1-8e99a3"><a href="#fn-1-8e99a3" class="footnote-ref">1</a></sup>:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">========== STATS =============</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Mean difference: 34.81ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Median difference: 11.00ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">P10 difference: -2.00ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">P25 difference: 3.00ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">P75 difference: 29.00ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">P90 difference: 53.00ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Max difference: 9311.00ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Min difference: -81.00ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Stdev: 273.80ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">========== RESULT =============</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Fiber won 81.87% of the time</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This is great news for Fiber, but seeing a pending transaction first is only one side of the coin.
In real-world scenarios, HFT players and bots need to capitalize on these opportunities by broadcasting
a responding transaction as quickly as possible<sup id="fnref-2-8e99a3"><a href="#fn-2-8e99a3" class="footnote-ref">2</a></sup>.
We therefore decided to measure both listening and broadcasting, to see which service is faster on both fronts.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="setup">Setup<a class="hash-link" href="#setup" title="Direct link to heading">​</a></h2><div class="theme-admonition theme-admonition-info alert alert--info admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_S0QG"><p><strong>Price plans used:</strong></p><ul><li><strong>Bloxroute</strong>: Enterprise Plan ($1250/mo)</li><li><strong>Fiber</strong>: Basic Plan ($500/mo)</li></ul></div></div><p>To test the services, we’ll set up a classical MEV scenario: the backrun. </p><p><em>Backrunning is the act of sending a transaction with the same gas price as some target
transaction, as fast as possible, which will result in your transaction being ordered right
after the target transaction by the entity putting together the block<sup id="fnref-3-8e99a3"><a href="#fn-3-8e99a3" class="footnote-ref">3</a></sup>. Transactions with
the same gas price are ordered by arrival time, so latency is extremely important here<sup id="fnref-4-8e99a3"><a href="#fn-4-8e99a3" class="footnote-ref">4</a></sup>.
Liquidity / NFT sniping, arbitrage and liquidations are all types of backrunning.</em></p><p>Backrunning will allow us to test 2 interrelated components that a mempool service must
have separately: <strong>fast transaction delivery</strong> (listening side) and <strong>fast transaction
distribution</strong> (sending side / broadcasting). The combination of these 2 is what determines
overall performance. We will establish the backrunning bot on a server in the us-east-1 Virginia
region, with roughly 1 millisecond latency to both the Fiber and Bloxroute API
(we’re using the Cloud Websockets API).
We don’t want last hop latency messing with the results.</p><p>Our target transactions (the one we want to backrun), will be broadcast from a couple of different sources: Infura, Alchemy, and a residential node in Belgium. The reason for this is that Infura and Alchemy together originate most of Ethereum transactions, and for the residential node, we’ll see how the services compare for a transaction that comes from somewhere closer to the network edge as opposed to AWS or Google Cloud. It will also show us the internal network latency of both network services: if a transaction originates in Belgium and our bot is in Virginia, a large part of the total latency will be taken up by internal propagation. Since both solutions use AWS, we don’t expect a large difference here, but it could still have an impact. Besides that, we’re also going to be backrunning 30 random transactions, that could come from anywhere.</p><p>We’re testing 10 backruns on each RPC node (besides the 30 random ones), to see if we can spot a pattern. The backrun transaction will be sent with the same nonce to both Bloxroute and Fiber, so to differentiate, we’ll input the service name as UTF-8 in the transaction’s calldata. For same nonce transactions, only the first one will be included, while the other will be dropped.</p><ul><li>Fiber: <code>0x6669626572</code><img loading="lazy" src="/assets/images/fiber-input-6e46d6a5e0ff36e6bdd9735effec4ce3.png" width="2000" height="246" class="img_ev3q"></li><li>Bloxroute: <code>0x626c6f78726f757465</code><img loading="lazy" src="/assets/images/bloxroute-input-43ace4bc1c930f0bb391c26274bb0f44.png" width="1904" height="234" class="img_ev3q"></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="results">Results<a class="hash-link" href="#results" title="Direct link to heading">​</a></h2><div class="theme-admonition theme-admonition-info alert alert--info admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_S0QG"><p>Download the CSV dataset <a target="_blank" href="/assets/files/data-9fbfe53a40df874cf3ea4bf2ff331c07.csv">here</a>.</p></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="transaction-delivery">Transaction delivery<a class="hash-link" href="#transaction-delivery" title="Direct link to heading">​</a></h3><p>For delivery time, Fiber was first 52 out of 60 times,
which is <strong>87%</strong> and roughly corresponds to our benchmark run above.
<img loading="lazy" src="/assets/images/seen-first-rate-f0f3b00b216f5bbd24061def1b96f9a9.png" width="1928" height="1158" class="img_ev3q">
Let’s take a closer look at transaction delivery time per service.
The vertical axis is the transaction delivery latency in <strong>milliseconds</strong>.
The service that first discovered the transaction has a latency of 0, and
the other value is the difference between the two.
<img loading="lazy" src="/assets/images/all-differences-92c75ede7bcab2896f67686a5d864af7.png" width="2935" height="1158" class="img_ev3q">
The largest latency difference is <strong>166ms</strong> in favor of Fiber,
let’s filter it out for now so we can have a better look at the rest of the values:
<img loading="lazy" src="/assets/images/filtered-differences-71cdf272dbd51375780e93d9dda56893.png" width="2935" height="1158" class="img_ev3q">
The above graph shows us that often, it’s a close call, but overall, <strong>Fiber is much closer to the baseline of 0 in all of the cases</strong>.
The largest difference by which Fiber lost is <strong>5 milliseconds</strong>, compared to 166ms for Bloxroute.
This shows us that Fiber is faster, and has more consistent performance,
which satisfies our second requirement.</p><p>We don’t find any significant correlation between the differences in delivery time and the RPC node used to
broadcast the target transaction, which means that both services are pretty well connected globally, and are able to internally propagate transactions quickly.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="overall-performance">Overall performance<a class="hash-link" href="#overall-performance" title="Direct link to heading">​</a></h3><p><strong>Fiber wins in 54 out of 60 backruns (90% of the time)</strong>
<img loading="lazy" src="/assets/images/total-win-rate-4bd2b4bba9d2d97bb4e199dd67be1f3a.png" width="1928" height="1158" class="img_ev3q">
Fiber wins 90% of the backrunning challenges that we set up.</p><p>Interestingly, in 2 cases where Bloxroute delivered a transaction first (by 1 and 4 milliseconds), Fiber still won the backrun. This means that in those 2 cases, Fiber’s distribution network was faster.</p><figure><img loading="lazy" src="https://wallpapercave.com/wp/wp9032145.jpg" class="img_ev3q"><figcaption><sup>Source: https://wallpapercave.com/w/wp9032145</sup></figcaption></figure><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p><strong>A good mempool service tries to tame the chaos and randomness inherent to a global mempool</strong>. This gets harder and harder the more decentralized a network layer is, which is why it’s important to try to cover as much ground as possible. Not just in terms of geographic distribution, but also in connecting to a broad set of peers. With Fiber, we’ve built the technology in a way that allows us to do this for a reasonable cost, which is why we came out ahead. </p><p>Ever since the <a href="https://docs.flashbots.net/flashbots-auction/overview" target="_blank" rel="noopener noreferrer">Flashbots auction</a> launched, we realize latency on Ethereum mainnet has lost some of its importance. But we decided to build on Ethereum first to prove that we can be faster, and to then expand to other chains (and rollups) to do the same. Check out our <a href="https://fiber.chainbound.io/docs/roadmap" target="_blank" rel="noopener noreferrer">roadmap</a> for more information.</p><p>If you’re interested in trying Fiber out, we have a 5 day refund period. Join our <a href="https://discord.gg/J4KNdeCYGX" target="_blank" rel="noopener noreferrer">Discord</a> and shoot us a message and we’ll DM you. For now, we offer 2 plans: Basic ($500/mo) and Professional ($1000/mo). The only differentiator between the plans is that with Basic, you can actively listen to only one stream at a time, while you can listen to up to 3 with Professional (from multiple locations). We don’t introduce any artificial latency to the Basic plan. Accessing Fiber can easily be done by using the client libraries we built in <a href="https://github.com/chainbound/fiber-go" target="_blank" rel="noopener noreferrer">Go</a>, <a href="https://github.com/chainbound/fiber-rs" target="_blank" rel="noopener noreferrer">Rust</a> and <a href="https://github.com/chainbound/fiber-ts" target="_blank" rel="noopener noreferrer">TypeScript</a>. Read more in the documentation <a href="https://fiber.chainbound.io/docs/intro" target="_blank" rel="noopener noreferrer">here</a>.</p><p><strong>Thanks for reading!</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="footnotes">Footnotes<a class="hash-link" href="#footnotes" title="Direct link to heading">​</a></h2><div class="footnotes"><hr><ol><li id="fn-1-8e99a3">P10/P25/P75/P90 are the percentiles in which each of the latency difference observations fall. Negative means that Bloxroute was faster. For example, P10 is -2ms, which means that for the lowest 10% of observations, Bloxroute was faster by &gt;2ms.
On the other hand, a P90 value of 53 means that 10% of the transaction where delivered by Fiber first with a difference of more than 54 milliseconds.<a href="#fnref-1-8e99a3" class="footnote-backref">↩</a></li><li id="fn-2-8e99a3">Unless they decide to use a private mempool like Flashbots.<a href="#fnref-2-8e99a3" class="footnote-backref">↩</a></li><li id="fn-3-8e99a3">Assuming neither the backrun transaction or the target transaction is reordered due to being included in a bundle.<a href="#fnref-3-8e99a3" class="footnote-backref">↩</a></li><li id="fn-4-8e99a3">Go-ethereum code: <a href="https://github.com/ethereum/go-ethereum/blob/645e3e86c45bfb726b507e661f788baa85d0249f/core/types/transaction.go#L531" target="_blank" rel="noopener noreferrer">go-ethereum/core/types/transaction.go#L53</a>. Note that for type 2 transactions, the order is determined by the priority fee.<a href="#fnref-4-8e99a3" class="footnote-backref">↩</a></li></ol></div>]]></content:encoded>
            <category>ethereum</category>
            <category>mempool</category>
        </item>
        <item>
            <title><![CDATA[Diving into the Reth p2p stack]]></title>
            <link>https://fiber.chainbound.io/blog/reth-p2p</link>
            <guid>reth-p2p</guid>
            <pubDate>Fri, 17 Feb 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Recently, the engineering team at Paradigm unveiled a new open-source execution client]]></description>
            <content:encoded><![CDATA[<p>Recently, the engineering team at Paradigm <a href="https://www.paradigm.xyz/2022/12/reth" target="_blank" rel="noopener noreferrer">unveiled</a> a new open-source execution client
called <strong><a href="https://github.com/paradigmxyz/reth" target="_blank" rel="noopener noreferrer">Reth</a></strong>. In short, reth aims to be an execution client to serve a large
user base, including <strong>power users</strong> like MEV searchers, RPC node operators, block builders, and more. It will do so by making reth highly
performant, but also very configurable, so that users can tweak and tune the settings to find the optimal setup
for their use case. No other execution client is doing this, so this is big positive for the space.</p><p><img loading="lazy" src="/assets/images/client-diversity-f113264a0139c916d9b66f9573e3e2d7.png" width="1404" height="1004" class="img_ev3q"></p><p>Aside from this and the fact that <a href="https://clientdiversity.org/#distribution" target="_blank" rel="noopener noreferrer">client diversity</a> is crucial,
reth aims to accomodate developers as well.
<strong>Every part of the reth stack will be modular enough to use as a standalone component in your stack</strong>.
In their article, Paradigm mentions the blazing-fast database bindings that indexing companies could use,
and that their EVM can be leveraged by <a href="https://eips.ethereum.org/EIPS/eip-4337" target="_blank" rel="noopener noreferrer">ERC4337</a> bundlers to run fast simulations.
In this article, we’ll talk about the architecture and usage of the networking stack, which plays an important role in <a href="https://fiber.chainbound.io" target="_blank" rel="noopener noreferrer">Fiber Network</a>.</p><div class="theme-admonition theme-admonition-info alert alert--info admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_S0QG"><p>💡 When I’m referencing reth code, you will find a Github permalink in the footnotes. </p><p>All the example code (including dependencies and versions) can be found at <a href="https://github.com/jonasbostoen/reth-p2p-showcase" target="_blank" rel="noopener noreferrer">https://github.com/jonasbostoen/reth-p2p-showcase</a>.</p></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="showcase">Showcase<a class="hash-link" href="#showcase" title="Direct link to heading">​</a></h2><p>We don’t just want to tell you about how great it is, we want to show you. Below is a Rust code snippet of how you can spin up a minimal <a href="https://github.com/ethereum/devp2p" target="_blank" rel="noopener noreferrer">devp2p</a> node and listen to network events:</p><div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">examples/simple.rs</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">secp256k1</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">rand</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">SecretKey</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">std</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">sync</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Arc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">tokio_stream</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">StreamExt</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">reth_network</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token class-name">NetworkConfig</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">NetworkManager</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">reth_provider</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">test_utils</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">NoopProvider</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[tokio::main]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">anyhow</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Generate a random ECDSA private key.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> secret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">SecretKey</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">rand</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">thread_rng</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Create the network builder with the secret key, which allows you to configure the network.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// The defaults will do for now, but we'll disable DNS discovery</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// and specify the bootnodes discv4 should use for discovering peers.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> builder </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">NetworkConfig</span><span class="token punctuation" style="color:#393A34">::</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">NoopProvider</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">builder</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">secret</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">disable_dns_discovery</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">boot_nodes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">mainnet_nodes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Build the config. The configuration needs a client to interact with the chain (to respond to block header</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// and block bodies requests), but for now we'll just use a no-op client.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> config </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> builder</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">build</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Arc</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">NoopProvider</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">default</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> network </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">NetworkManager</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">config</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Get a handle to the network manager</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> network_handle </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> network</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">handle</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">clone</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Subscribe to network events</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> network_events </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> network_handle</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">event_listener</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Starting network manager..."</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Spawn the network manager task. This will start the network manager</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// and all the subcomponents necessary for the devp2p stack.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token namespace" style="opacity:0.7">tokio</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">spawn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">network</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token class-name">Some</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">net_event</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> network_events</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Received network event: {:?}"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> net_event</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>All of the complexities of discovery, peer and session management, and message handling are nicely bundled inside of the <code>NetworkManager</code>. We'll cover
that in more details below, but for now, you can just run it with</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cargo r --example simple</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>After a while you should start to see network events like <code>PeerAdded</code>, <code>PeerRemoved</code>, <code>SessionEstablished</code> and <code>SessionClosed</code><sup id="fnref-1-8e95a6"><a href="#fn-1-8e95a6" class="footnote-ref">1</a></sup>:</p><p><img loading="lazy" src="/assets/images/screenshot-1-4fb89146d1e502ee4f13e017c6a6310d.png" width="2630" height="846" class="img_ev3q"></p><p>Note that this is a very minimal example and you won’t be able to maintain any peering connections, because for that, we would need to respond to <code>eth</code> protocol
requests like <a href="https://github.com/ethereum/devp2p/blob/master/caps/eth.md#getblockheaders-0x03" target="_blank" rel="noopener noreferrer"><code>GetBlockHeaders</code></a> and <a href="https://github.com/ethereum/devp2p/blob/master/caps/eth.md#getblockbodies-0x05" target="_blank" rel="noopener noreferrer"><code>GetBlockBodies</code></a>,
which we can only do if we provide a valid chain provider (instead of <code>NoopProvider</code>).</p><p>This doesn’t give us a lot of information though. Reth uses the <code>tracing</code> library for logging events,
which we can activate with the <code>RUST_LOG</code> environment variable.</p><p>If we run our binary with <code>RUST_LOG</code> set to <code>trace</code>, <code>debug</code> or <code>info</code>, we can see a lot more of what’s happening under the hood:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">RUST_LOG=debug cargo r --example simple</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="/assets/images/screenshot-2-e13b190de472f8a9f24191b1f711c456.png" width="2744" height="814" class="img_ev3q"></p><p>If you want to zoom in on certain trace targets you can do so by tuning the <code>RUST_LOG</code> variable, for example,
setting it to <code>RUST_LOG=discv4=trace,net=info</code>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="creating-our-own-message-handlers">Creating our own message handlers<a class="hash-link" href="#creating-our-own-message-handlers" title="Direct link to heading">​</a></h3><p>We were able to run a minimally functional devp2p node in about 20 lines of code, which is impressive. But let’s take a look at what else the modular design allows us to do.
In this following example, we’ll set the basis for providing custom handlers for <code>eth</code> protocol messages like <code>GetBlockHeaders</code> and <code>GetBlockBodies</code>,
but also for the transaction exchange messages:</p><ul><li><code>PooledTransactionHashes</code></li><li><code>Transactions</code></li><li><code>PooledTransactions</code></li></ul><p>This could be useful if you want to route <code>eth</code> sync requests to another location (say you’re running this as a sentry and want to relay requests to another node that keeps the actual blockchain state).
Or you want to build your own transaction pool logic so you need access to all the transaction messages you’re receiving from the network. We can do this by using the <code>set_eth_request_handler</code> and <code>set_transactions</code> methods on our <code>NetworkManager</code> like so:</p><div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">examples/custom_handlers.rs</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">reth_p2p</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token plain">init_tracing</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">secp256k1</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">rand</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">SecretKey</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">std</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">sync</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Arc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">tokio</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">sync</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token plain">mpsc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">tokio_stream</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">StreamExt</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">reth_discv4</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">bootnodes</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token plain">mainnet_nodes</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">reth_network</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token class-name">NetworkConfig</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">NetworkManager</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">PeersConfig</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">reth_provider</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">test_utils</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">NoopProvider</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[tokio::main]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">anyhow</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">init_tracing</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Generate a random ECDSA private key.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> secret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">SecretKey</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">rand</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">thread_rng</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// // Create a peer configuration with max 10 outbound and 10 inbound peers.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> peer_config </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">PeersConfig</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">default</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">with_max_outbound</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">with_max_inbound</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Add the peer configuration here.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> builder </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">NetworkConfig</span><span class="token punctuation" style="color:#393A34">::</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">NoopProvider</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">builder</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">secret</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">disable_dns_discovery</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">boot_nodes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">mainnet_nodes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">peer_config</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">peer_config</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Build the config. The configuration needs a client to interact with the chain (to respond to block header</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// and block bodies requests), but for now we'll just use a no-op client.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> config </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> builder</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">build</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Arc</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">NoopProvider</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">default</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> network </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">NetworkManager</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">config</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Create the channels for receiving eth messages</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">eth_tx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> eth_rx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">mpsc</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">unbounded_channel</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">transaction_tx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> transaction_rx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">mpsc</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">unbounded_channel</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    network</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">set_eth_request_handler</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">eth_tx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    network</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">set_transactions</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">transaction_tx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> network_handle </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> network</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">handle</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">clone</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> network_events </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> network_handle</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">event_listener</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Starting network manager..."</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token namespace" style="opacity:0.7">tokio</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">spawn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">network</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">loop</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token namespace" style="opacity:0.7">tokio</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token macro property" style="color:#36acaa">select!</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token class-name">Some</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tx_event</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> transaction_rx</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">recv</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"New transaction event: {:?}"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tx_event</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token class-name">Some</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">eth_req</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> eth_rx</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">recv</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"New eth protocol request: {:?}"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> eth_req</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token class-name">Some</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">net_event</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> network_events</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"New network event: {:?}"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> net_event</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>When you run the <code>custom_handlers</code> example now, you will occasionally see these messages printed out. Note that in this example,
I’ve also used a custom peer configuration that specifies the maximum number of outbound and inbound peers.
Now that we have a very slim idea of what we can do with <code>reth-network</code>, let’s have a closer look at the architecture before looking at some more options.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="architecture">Architecture<a class="hash-link" href="#architecture" title="Direct link to heading">​</a></h2><p>At a high level, the p2p stack is implemented as a hierarchy of <a href="https://en.wikipedia.org/wiki/Finite-state_machine" target="_blank" rel="noopener noreferrer">state machines</a> where parents pass events down to their children, and children bubble up events to their parents.
<code>NetworkManager</code><sup id="fnref-2-8e95a6"><a href="#fn-2-8e95a6" class="footnote-ref">2</a></sup> is the entry point of this whole hierarchy, and it is implemented as an endless <a href="https://rust-lang.github.io/async-book/02_execution/02_future.html" target="_blank" rel="noopener noreferrer">future</a>.
When we spawn the manager with <code>tokio::spawn(network)</code>, we let the tokio runtime drive the state of the manager forward.
The runtime continually calls <code>poll</code><sup id="fnref-3-8e95a6"><a href="#fn-3-8e95a6" class="footnote-ref">3</a></sup>, which in turn polls all the underlying components, all the way down the hierarchy.
This mechanism is how the events bubble up and work is performed<sup id="fnref-4-8e95a6"><a href="#fn-4-8e95a6" class="footnote-ref">4</a></sup>. The architecture in a diagram looks like this:</p><p><img loading="lazy" src="/assets/images/reth-network-architecture-71adc3ac8ed07b04bee8277d1f271388.png" width="2435" height="2416" class="img_ev3q"></p><p><code>Discv5</code> is greyed out because it’s still in the works. One thing we’ve seen in the code but haven’t talked about yet is the <code>NetworkHandle</code>, which we got with <code>network.handle().clone()</code>. This is a thread-safe, clonable handle that can be used to communicate with the network manager and all of the other components it manages.
If you look at the whole reth codebase, you’ll see that this handle is shared between all the different subsystems that need access to the network, like the state syncer.
This pattern is somewhat similar to the <a href="https://ryhl.io/blog/actors-with-tokio/" target="_blank" rel="noopener noreferrer">actor pattern</a>.</p><p>For us, it also has a very interesting interface. We can use it to broadcast transactions or transaction announcements, add and remove (trusted) peers, change peer reputation, and so on.
Take a look at <a href="https://github.com/paradigmxyz/reth/blob/24bc633bbda05de0772c66b851af83c63a028144/crates/net/network/src/network.rs" target="_blank" rel="noopener noreferrer">this file</a> for more information.
We won’t cover what each component does in too much depth, since that’s already being done in the <a href="https://github.com/paradigmxyz/reth/tree/main/docs" target="_blank" rel="noopener noreferrer">reth developer docs</a>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="peer-lifecycle">Peer lifecycle<a class="hash-link" href="#peer-lifecycle" title="Direct link to heading">​</a></h3><p>Let’s take a look at the lifecycle of a peer in the networking stack, because this will involve every component we’ve outlined above.
Specifically, we’ll look at outbound connections, because it's a more complex process.</p><p><code>Discovery</code><sup id="fnref-5-8e95a6"><a href="#fn-5-8e95a6" class="footnote-ref">5</a></sup> is the service responsible for discovering peers. It currently envelops 2 subsystems: <code>Discv4</code><sup id="fnref-6-8e95a6"><a href="#fn-6-8e95a6" class="footnote-ref">6</a></sup> and <code>DnsDiscovery</code><sup id="fnref-7-8e95a6"><a href="#fn-7-8e95a6" class="footnote-ref">7</a></sup>, with <code>Discv5</code> in the <a href="https://github.com/paradigmxyz/reth/issues/1383" target="_blank" rel="noopener noreferrer">pipeline</a>.
If you want to dive deeper into how these mechanisms work, see the links in the footnotes. Discovering a peer is the first step in the peer lifecycle.
In short, the discovery service queries other nodes over UDP for their neighbors, starting with the pre-defined bootstrap nodes. The nodes in a response message
are queried in turn, and so on, so that our node gradually builds up a picture of the network. Every node undergoes a couple of checks, and if passed, is considered a newly discovered node.</p><p>Once a new node is discovered, the discovery service will bubble up an event with the information of the peer to the <code>NetworkState</code><sup id="fnref-8-8e95a6"><a href="#fn-8-8e95a6" class="footnote-ref">8</a></sup>, which in turn notifies the <code>Swarm</code><sup id="fnref-9-8e95a6"><a href="#fn-9-8e95a6" class="footnote-ref">9</a></sup>.
The <code>Swarm</code> in then does an <a href="https://eips.ethereum.org/EIPS/eip-2124" target="_blank" rel="noopener noreferrer">EIP-2124</a> fork ID check. If this check passes, the <code>Swarm</code> adds the peer to the <code>PeerManager</code>, where it will sit as a candidate to be dialed<sup id="fnref-10-8e95a6"><a href="#fn-10-8e95a6" class="footnote-ref">10</a></sup>.</p><p>Depending on wether there are any outbound peer slots available, the peer will be bubbled up as a dial candidate to the <code>Swarm</code> again.
This time, it will pass it down to <code>SessionManager</code> to start an outbound session with<sup id="fnref-11-8e95a6"><a href="#fn-11-8e95a6" class="footnote-ref">11</a></sup>.
Specifically, the <code>Swarm</code> calls <a href="https://github.com/paradigmxyz/reth/blob/f9de425ad895279c24a72977ffd0c6973afaf90e/crates/net/network/src/session/mod.rs#L215" target="_blank" rel="noopener noreferrer"><code>dial_outbound</code></a>,
which will try to establish a session with the peer by running the <a href="https://github.com/ethereum/devp2p/blob/master/rlpx.md" target="_blank" rel="noopener noreferrer">RLPx</a> and <a href="https://github.com/ethereum/devp2p/blob/master/caps/eth.md" target="_blank" rel="noopener noreferrer">eth</a> protocol handshakes.
Once these handshakes pass, the peer will move from the pending to the active state,
and a new <code>ActiveSession</code> will be created, which wraps the underlying RLPx and <code>eth</code> connection with said peer<sup id="fnref-12-8e95a6"><a href="#fn-12-8e95a6" class="footnote-ref">12</a></sup>.
The <code>SessionManager</code> keeps track of all these sessions, and notifies its parents about any messages, like transactions or block header requests.</p><p>We’ve skipped over some parts of the work involved, but hopefully you now have some idea about how these components interact, and how there is a clean <a href="https://en.wikipedia.org/wiki/Separation_of_concerns" target="_blank" rel="noopener noreferrer">seperation of concerns</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="more-examples">More examples<a class="hash-link" href="#more-examples" title="Direct link to heading">​</a></h2><p>What if you want to bypass the default discovery services and only add peers that you’ve evaluated somehow? This evaluation function could be anything, like</p><ul><li>Ping the remote endpoint and only go ahead if RTT is below a certain threshold (contrived example, don't do this in prod)</li><li>Check if the IP address belongs to a certain cloud provider or is in a certain country / region</li><li>…</li></ul><p>For this example we’ll use the <code>Discv4</code> service, but you could also use the <code>Discovery</code> service, which does both discv4 and DNS discovery.
First we’ll disable the default discovery services, and then spawn our own discv4 service.
We listen to the discovery events, and when a new node is added, we run the evaluation function, only proceeding with adding the peer
if it evaluates to <code>true</code>:</p><div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">examples/custom_disc.rs</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">reth_p2p</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token plain">init_tracing</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">secp256k1</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">rand</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">SecretKey</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">std</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token namespace" style="opacity:0.7">net</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">SocketAddr</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">str</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">FromStr</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">sync</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Arc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">time</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Duration</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">tokio_stream</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">StreamExt</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">reth_discv4</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token namespace" style="opacity:0.7">bootnodes</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token plain">mainnet_nodes</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">DiscoveryUpdate</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Discv4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Discv4ConfigBuilder</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">NodeRecord</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">reth_network</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token class-name">NetworkConfig</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">NetworkManager</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">reth_network_api</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token class-name">PeerKind</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Peers</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">reth_provider</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">test_utils</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">NoopProvider</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[tokio::main]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">anyhow</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">init_tracing</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Generate a random ECDSA private key.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> secret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">SecretKey</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">rand</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">thread_rng</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Disable the default discovery services.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> builder </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">NetworkConfig</span><span class="token punctuation" style="color:#393A34">::</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">NoopProvider</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">builder</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">secret</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">disable_dns_discovery</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">disable_discv4_discovery</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">boot_nodes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">mainnet_nodes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Build the config. The configuration needs a client to interact with the chain (to respond to block header</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// and block bodies requests), but for now we'll just use a no-op client.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> config </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> builder</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">build</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Arc</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">NoopProvider</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">default</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> network </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">NetworkManager</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">config</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> peer_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">network</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">peer_id</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Get a handle to the network manager</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> network_handle </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> network</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">handle</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">clone</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Starting network manager..."</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Spawn the network manager task. This will start the network manager</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// and all the subcomponents necessary for the devp2p stack.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token namespace" style="opacity:0.7">tokio</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">spawn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">network</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Build local node record</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> disc_addr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">SocketAddr</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from_str</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"0.0.0.0:30303"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> local_enr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">NodeRecord</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> peer_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        address</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> disc_addr</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ip</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        tcp_port</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> disc_addr</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">port</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        udp_port</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> disc_addr</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">port</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Create the discv4 config</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> discv4_config </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Discv4ConfigBuilder</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">default</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Decrease lookup interval to 5 seconds (from 20 sec default)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">lookup_interval</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Duration</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from_secs</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Decrease ban duration to 30 minutes</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ban_duration</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Some</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Duration</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from_secs</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">30</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">60</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">add_boot_nodes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">mainnet_nodes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">build</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">_discv4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> service</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Discv4</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">bind</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">disc_addr</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> local_enr</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> secret</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> discv4_config</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> disc_updates </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> service</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">update_stream</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Spawn the discv4 service</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> _handle </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> service</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">spawn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token class-name">Some</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">disc_event</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> disc_updates</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">match</span><span class="token plain"> disc_event </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token class-name">DiscoveryUpdate</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Added</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">enr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token class-name">DiscoveryUpdate</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">DiscoveredAtCapacity</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">enr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Discovered new node: {:?}"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> enr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// Evaluate if we want to connect to peer</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">custom_peer_eval_func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">enr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    network_handle</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">add_peer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">enr</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> enr</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">tcp_addr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token class-name">DiscoveryUpdate</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Removed</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                network_handle</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">remove_peer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">PeerKind</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Basic</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            _ </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// This function could be used to add some custom peer evaluation logic,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// like a ping below n milliseconds.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">custom_peer_eval_func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">_enr</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token class-name">NodeRecord</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">bool</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token boolean" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>We’ve also tweaked some settings here like the default ban duration and the lookup interval, which will have an effect on how fast you’ll discover new nodes. Note that you’ll want to run the peer evaluation function asynchronously if you’re doing any network I/O like pings, to not block the event handling loop.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="other-ideas">Other ideas<a class="hash-link" href="#other-ideas" title="Direct link to heading">​</a></h3><ul><li>Use the <code>DiscoveryService</code> to build a network crawler.</li><li>You can change the reputation of the peers you’re connected to through the <code>NetworkHandle::reputation_change</code><sup id="fnref-13-8e95a6"><a href="#fn-13-8e95a6" class="footnote-ref">13</a></sup>.
There are some default reputation penalties that reth implements on bad messages, disconnections, etc.,
but you can apply your own with <code>ReputationChangeKind::Other</code>. This could allow you to build a peer set that meets certain requirements.</li></ul><p>Thanks for reading and feel free to contact me on Twitter <a href="https://twitter.com/mempirate" target="_blank" rel="noopener noreferrer">@mempirate</a> if you have any questions!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="further-reading">Further reading<a class="hash-link" href="#further-reading" title="Direct link to heading">​</a></h2><ul><li><a href="https://github.com/paradigmxyz/reth/tree/main/docs" target="_blank" rel="noopener noreferrer">Reth developer docs</a></li><li>The code documentation (run <code>cargo doc --open</code> in the repository)</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="footnotes">Footnotes<a class="hash-link" href="#footnotes" title="Direct link to heading">​</a></h2><div class="footnotes"><hr><ol><li id="fn-1-8e95a6"><p><a href="https://github.com/paradigmxyz/reth/blob/c5bc272057b473337191de50e7f86d07cf93c5a1/crates/net/network/src/manager.rs#L771" target="_blank" rel="noopener noreferrer">https://github.com/paradigmxyz/reth/blob/c5bc272057b473337191de50e7f86d07cf93c5a1/crates/net/network/src/manager.rs#L771</a><a href="#fnref-1-8e95a6" class="footnote-backref">↩</a></p></li><li id="fn-2-8e95a6"><p><a href="https://github.com/paradigmxyz/reth/blob/c5bc272057b473337191de50e7f86d07cf93c5a1/crates/net/network/src/manager.rs#L86" target="_blank" rel="noopener noreferrer">https://github.com/paradigmxyz/reth/blob/c5bc272057b473337191de50e7f86d07cf93c5a1/crates/net/network/src/manager.rs#L86</a><a href="#fnref-2-8e95a6" class="footnote-backref">↩</a></p></li><li id="fn-3-8e95a6"><p><a href="https://github.com/paradigmxyz/reth/blob/24bc633bbda05de0772c66b851af83c63a028144/crates/net/network/src/manager.rs#L466" target="_blank" rel="noopener noreferrer">https://github.com/paradigmxyz/reth/blob/</a><a href="https://github.com/paradigmxyz/reth/blob/c5bc272057b473337191de50e7f86d07cf93c5a1/crates/net/network/src/manager.rs#L86" target="_blank" rel="noopener noreferrer">c5bc272057b473337191de50e7f86d07cf93c5a1</a><a href="https://github.com/paradigmxyz/reth/blob/24bc633bbda05de0772c66b851af83c63a028144/crates/net/network/src/manager.rs#L466" target="_blank" rel="noopener noreferrer">/crates/net/network/src/manager.rs#L466</a><a href="#fnref-3-8e95a6" class="footnote-backref">↩</a></p></li><li id="fn-4-8e95a6"><p>This is similar to how rust-libp2p does it: <a href="https://github.com/libp2p/rust-libp2p/blob/master/docs/coding-guidelines.md" target="_blank" rel="noopener noreferrer">https://github.com/libp2p/rust-libp2p/blob/master/docs/coding-guidelines.md</a><a href="#fnref-4-8e95a6" class="footnote-backref">↩</a></p></li><li id="fn-5-8e95a6"><p><a href="https://github.com/paradigmxyz/reth/blob/6005ecb89a42b34facdaa020471347b47b043526/crates/net/network/src/discovery.rs#L23" target="_blank" rel="noopener noreferrer">https://github.com/paradigmxyz/reth/blob/6005ecb89a42b34facdaa020471347b47b043526/crates/net/network/src/discovery.rs#L23</a><a href="#fnref-5-8e95a6" class="footnote-backref">↩</a></p></li><li id="fn-6-8e95a6"><p><a href="https://github.com/paradigmxyz/reth/blob/6005ecb89a42b34facdaa020471347b47b043526/crates/net/discv4/src/lib.rs#L119" target="_blank" rel="noopener noreferrer">https://github.com/paradigmxyz/reth/blob/6005ecb89a42b34facdaa020471347b47b043526/crates/net/discv4/src/lib.rs#L119</a></p><p>  Spec: <a href="https://github.com/ethereum/devp2p/blob/master/discv4.md" target="_blank" rel="noopener noreferrer">https://github.com/ethereum/devp2p/blob/master/discv4.md</a><a href="#fnref-6-8e95a6" class="footnote-backref">↩</a></p></li><li id="fn-7-8e95a6"><p><a href="https://github.com/paradigmxyz/reth/blob/f9de425ad895279c24a72977ffd0c6973afaf90e/crates/net/dns/src/lib.rs#L86" target="_blank" rel="noopener noreferrer">https://github.com/paradigmxyz/reth/blob/f9de425ad895279c24a72977ffd0c6973afaf90e/crates/net/dns/src/lib.rs#L86</a></p><p>  Spec: <a href="https://eips.ethereum.org/EIPS/eip-1459" target="_blank" rel="noopener noreferrer">https://eips.ethereum.org/EIPS/eip-1459</a><a href="#fnref-7-8e95a6" class="footnote-backref">↩</a></p></li><li id="fn-8-8e95a6"><p><a href="https://github.com/paradigmxyz/reth/blob/f9de425ad895279c24a72977ffd0c6973afaf90e/crates/net/network/src/state.rs#L45" target="_blank" rel="noopener noreferrer">https://github.com/paradigmxyz/reth/blob/f9de425ad895279c24a72977ffd0c6973afaf90e/crates/net/network/src/state.rs#L45</a><a href="#fnref-8-8e95a6" class="footnote-backref">↩</a></p></li><li id="fn-9-8e95a6"><p><a href="https://github.com/paradigmxyz/reth/blob/f9de425ad895279c24a72977ffd0c6973afaf90e/crates/net/network/src/swarm.rs#L65" target="_blank" rel="noopener noreferrer">https://github.com/paradigmxyz/reth/blob/f9de425ad895279c24a72977ffd0c6973afaf90e/crates/net/network/src/swarm.rs#L65</a><a href="#fnref-9-8e95a6" class="footnote-backref">↩</a></p></li><li id="fn-10-8e95a6"><p><a href="https://github.com/paradigmxyz/reth/blob/f9de425ad895279c24a72977ffd0c6973afaf90e/crates/net/network/src/peers/manager.rs#L73" target="_blank" rel="noopener noreferrer">https://github.com/paradigmxyz/reth/blob/f9de425ad895279c24a72977ffd0c6973afaf90e/crates/net/network/src/peers/manager.rs#L73</a><a href="#fnref-10-8e95a6" class="footnote-backref">↩</a></p></li><li id="fn-11-8e95a6"><p><a href="https://github.com/paradigmxyz/reth/blob/f9de425ad895279c24a72977ffd0c6973afaf90e/crates/net/network/src/session/mod.rs#L52" target="_blank" rel="noopener noreferrer">https://github.com/paradigmxyz/reth/blob/f9de425ad895279c24a72977ffd0c6973afaf90e/crates/net/network/src/session/mod.rs#L52</a><a href="#fnref-11-8e95a6" class="footnote-backref">↩</a></p></li><li id="fn-12-8e95a6"><p><a href="https://github.com/paradigmxyz/reth/blob/f9de425ad895279c24a72977ffd0c6973afaf90e/crates/net/network/src/session/mod.rs#L370" target="_blank" rel="noopener noreferrer">https://github.com/paradigmxyz/reth/blob/f9de425ad895279c24a72977ffd0c6973afaf90e/crates/net/network/src/session/mod.rs#L370</a><a href="#fnref-12-8e95a6" class="footnote-backref">↩</a></p></li><li id="fn-13-8e95a6"><p><a href="https://github.dev/paradigmxyz/reth/blob/7c9b212b4a60838ce35c3db272788bd05d2eeec0/crates/net/network/src/network.rs#L215" target="_blank" rel="noopener noreferrer">https://github.dev/paradigmxyz/reth/blob/7c9b212b4a60838ce35c3db272788bd05d2eeec0/crates/net/network/src/network.rs#L215</a><a href="#fnref-13-8e95a6" class="footnote-backref">↩</a></p></li></ol></div>]]></content:encoded>
            <category>ethereum</category>
            <category>devp2p</category>
            <category>reth</category>
            <category>rust</category>
        </item>
        <item>
            <title><![CDATA[Identifying hotspots on the Ethereum p2p network]]></title>
            <link>https://fiber.chainbound.io/blog/ethereum-hotspots</link>
            <guid>ethereum-hotspots</guid>
            <pubDate>Fri, 21 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[In our journey of creating the ideal network topology for our Fiber nodes, we had to determine the critical geographical]]></description>
            <content:encoded><![CDATA[<p>In our journey of creating the ideal network topology for our Fiber nodes, we had to determine the critical geographical
regions of the Ethereum p2p network. We will define these "hotspots" as regions where the most transactions are originally
broadcasted from.</p><p>Because Fiber is a mempool service, we need to be able to deliver transactions to users as fast as possible, which also means making sure we sufficiently cover these hotspots. In essence, we want to make sure we're as close to the original
broadcaster is possible, which in p2p terms means either being directly connected to it, or only 1 or 2 hops away. Each hop
will introduce a non-trivial amount of latency, which is something we need to minimize.</p><p>Let's look at a couple scenarios:</p><p><img loading="lazy" src="/assets/images/2-hop-setup-472f68397ff0365f93fa9e97bd880999.png" width="2088" height="1126" class="img_ev3q"></p><p>In this setup, we're 2 hops away from the transaction broadcaster. We'll simplify here and assume that nodes always
broadcast the full transaction message, which is not the case <a href="#references">[2]</a>.</p><p>There are 3 factors introducing latency here:</p><ul><li><strong>A</strong>: The first network hop.</li><li><strong>B</strong>: The time it takes this node to process, validate, and re-broadcast the transaction.</li><li><strong>C</strong>: The second network hop.</li></ul><p>This network topology is not ideal, since your total latency will be <strong>A + B + C</strong>, and all of these steps
have an element of variability to them.</p><p>What we actually want is the following, single hop topology:</p><p><img loading="lazy" src="/assets/images/1-hop-setup-0c9cde82c28ea0ab946c5bc8f4ba5fcc.png" width="2088" height="1126" class="img_ev3q"></p><p>Here, the only latency we have is <strong>A</strong>, the first and only network hop. The only way to achieve this is to try
to <strong>connect to as much peers as possible in that region</strong>, which will give you a better chance of direct peerings
with transaction broadcasters. You can do this by either having one node with a very large maximum peer count, or by having more
than one node in the region. Because maintaining a large amount of peers is pretty resource intensive, we opted
for the second option.</p><p>Now that we know why we need to cover these hotspots sufficiently, how do we identify them?
This article will go over our findings.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-setup">The setup<a class="hash-link" href="#the-setup" title="Direct link to heading">​</a></h2><p>The setup will consist of a number of Ethereum nodes deployed globally that <strong>keep track of when they received a certain transaction, but also from which peer it came</strong>.
Later on, we'll be able to inspect these timestamps to see which node heard about the transaction first.
We'll also be able to use the peer IP addresses to find which hosting providers are responsible for broadcasting
the most transactions. But where do we deploy these nodes?</p><p>It's no secret that <strong>most critical Ethereum infrastructure runs on AWS</strong> <a href="#references">[1]</a>:</p><p><img loading="lazy" src="/assets/images/hosting-chart-2b4315f334068219e0601b474a7a7620.png" width="1350" height="762" class="img_ev3q"></p><p>Which is why we deployed our nodes in the following 13 AWS regions:</p><ul><li>us-east-1 (N. Virginia)</li><li>us-east-2 (Ohio)</li><li>us-west-1 (N. California)</li><li>us-west-2 (Oregon)</li><li>ap-east-1 (Hong Kong)</li><li>ap-northeast-2 (Seoul)</li><li>ap-northeast-1 (Tokyo)</li><li>ap-southeast-1 (Singapore)</li><li>eu-west-1 (Ireland)</li><li>eu-west-2 (London)</li><li>eu-west-3 (Paris)</li><li>eu-north-1 (Stockholm) </li></ul><p>This obviously doesn't cover the whole world, but since they're located at backbone hotspots, it will do.</p><p>Each node will be connected to a significant amount of peers (400), <strong>for a theoretical
maximum reach of 5200 peers</strong>. In practice, this number will be a lot lower due to duplicate peers.
With this setup, we've recorded <strong>5.5 million Ethereum transactions</strong> over the period of a couple of days. Let's look at the results.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-results">The results<a class="hash-link" href="#the-results" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="geography">Geography<a class="hash-link" href="#geography" title="Direct link to heading">​</a></h3><p><img loading="lazy" src="/assets/images/tx_geo-60d74af1388cc368069987071c6ece2f.png" width="1400" height="1000" class="img_ev3q">
Most transactions are seen first in the US in the North Virginia area, which is
where the notorious <strong>us-east-1</strong> AWS region sits. Ohio is a hotspot as well, seeing
a little more than 8% of transactions first. Regions on the West Coast are less active:
Oregon and North California combined only see a little more than 5% of transactions first.</p><p>In <strong>Europe</strong>, Frankfurt is by far the most active region. Paris and London are also important
regions, both seeing close to 6% of recorded transactions first. In the <strong>Asia Pacific</strong> region, Tokyo and Singapore are the most active.</p><p>Interestingly, looking at the activity per "continent", we can see that the EU and the US lead by a wide margin:
<img loading="lazy" src="/assets/images/tx_geo_continent-f11cd786698220243e35b2a6201101a5.png" width="1400" height="1000" class="img_ev3q"></p><p>Based on these results, we've been able to work out a good geographical distribution of our node setup.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="hosting-providers">Hosting providers<a class="hash-link" href="#hosting-providers" title="Direct link to heading">​</a></h3><p>Since we recorded the sending peer of every transaction, we can take a closer look at the different hosting
providers that originate the most transactions. We know that AWS hosts a lot of full nodes, but is that actually where
infrastructure that belongs to the largest <em>transaction broadcasters</em> is?</p><p>To figure that out, we'll look at the top 3 most "active" peers (peers from which we received the most transactions first) per region, and identify the hosting provider based on their IP addresses.</p><p><strong>us-east-1: Virginia region</strong></p><p>All in AWS, Virginia.</p><p><strong>eu-central-1: Frankfurt region</strong></p><p>All in Hetzner, Frankfurt. Hetzner is a bare metal cloud provider that's primarily active in Germany.</p><p><strong>us-east-2: Ohio region</strong></p><p>All in AWS, Virginia. Only the 4th biggest originated from the AWS Ohio datacenter, again confirming that the us-east-1 region
is a big hotspot.</p><p><strong>eu-west-3: Paris region</strong></p><ol><li>Google Cloud, Brussels</li><li>Google Cloud, Brussels</li><li>Hetzner, Frankfurt</li></ol><p>This seems to suggest that the Paris region itself is not very active.</p><p><strong>eu-west-2: London region</strong></p><ol><li>OVHCloud, London</li><li>Google Cloud, Brussels</li><li>Hetzner, Frankfurt</li></ol><p><strong>ap-northeast-1: Tokyo region</strong></p><ol><li>AWS, Tokyo</li><li>AWS, Virginia</li><li>AWS, Tokyo</li></ol><p><strong>ap-southeast-1: Singapore region</strong></p><ol><li>Contabo, Singapore</li><li>Hetzner, Frankfurt (?)</li><li>AWS, Singapore</li></ol><p><strong>eu-west-1: Dublin region</strong></p><ol><li>AWS, Dublin</li><li>AWS, Tokyo (?)</li><li>AWS, Dublin</li></ol><p><strong>us-west-2: Oregon region</strong></p><ol><li>Telus Communications, Vancouver</li><li>AWS, Virginia</li><li>AWS, Oregon</li></ol><p><strong>ap-east-1: Hong Kong region</strong></p><ol><li>Google Cloud, Hong Kong</li><li>Google Cloud, Hong Kong</li><li>AWS, Virginia (?)</li></ol><p><strong>ap-northeast-2: Seoul region</strong></p><ol><li>AWS, Seoul</li><li>AWS, Seoul</li><li>AWS, Tokyo</li></ol><p><strong>eu-north-1: Stockholm region</strong></p><ol><li>Hetzner, Frankfurt</li><li>AWS, Virginia (?)</li><li>Hetzner, Finland</li></ol><p><strong>us-west-1: California region</strong></p><ol><li>AWS, Virginia</li><li>AWS, Virginia</li><li>AWS, California</li></ol><p>And putting all the winners in a table:</p><table><thead><tr><th>Region</th><th>Hosting Provider</th></tr></thead><tbody><tr><td>us-east-1</td><td>AWS, Virginia</td></tr><tr><td>eu-central-1</td><td>Hetzner, Frankfurt</td></tr><tr><td>us-east-2</td><td>AWS, Ohio</td></tr><tr><td>eu-west-3</td><td>Google Cloud, Brussels</td></tr><tr><td>eu-west-2</td><td>OVH, UK</td></tr><tr><td>ap-northeast-1</td><td>AWS, Tokyo</td></tr><tr><td>ap-southeast-1</td><td>Contabo, Singapore</td></tr><tr><td>eu-west-1</td><td>AWS, Dublin</td></tr><tr><td>us-west-2</td><td>Telus Communications, Vancouver</td></tr><tr><td>ap-east-1</td><td>Google Cloud, Hong Kong</td></tr><tr><td>ap-northeast-2</td><td>AWS, Seoul</td></tr><tr><td>eu-north-1</td><td>Hetzner, Frankfurt</td></tr><tr><td>us-west-1</td><td>AWS, Virginia</td></tr></tbody></table><p>Turns out that <strong>AWS wins only in 6 of the 13 regions</strong>. In Virginia and in Ohio, both very important regions, it has been the biggest broadcaster. But we also see Google Cloud winning in Hong Kong as well as in Paris (from their datacenter in Brussels, Belgium). Hetzner wins in Frankfurt by a wide margin, perhaps not surprisingly. It also wins in Stockholm, Sweden,
even though the broadcaster was in Frankfurt. This tells us that the eu-north area does not seem to have a lot of
activity. Overall, Hetzner is a really active hosting provider in Europe.
In Oregon, the biggest broadcaster was in Vancouver, Canada. In Singapore, it came from Contabo.</p><p>Another interesting observation is that there's almost never one broadcaster that stands out per region. The second and
third biggest broadcasters are never far behind. This suggests that providers like <a href="https://www.alchemy.com/" target="_blank" rel="noopener noreferrer">Alchemy</a>
and <a href="https://infura.io/" target="_blank" rel="noopener noreferrer">Infura</a>, who send the largest part of Ethereum transactions, use a lot of nodes, possibly
distributed across geographic areas.</p><p>You might have also noticed the slight anomalies tagged with <strong>(?)</strong>. These are entries that don't really make a lot of sense.
The fact that an AWS broadcaster in Virginia can make the top 3 active peers of our node in Hong Kong
means that those transactions didn't arrive at our node in Virginia first. For now, we attribute these anomalies to the randomness
of the p2p network, but we'll continue looking into it.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>When milliseconds matter, this is all information that has to be taken into consideration, and that's what we did
with Fiber. Listening to transactions is only one aspect of high frequency trading on blockchains, but it's a very important one that one needs to get right by carefully choosing the regions, concentration, and cloud providers
across which to deploy nodes.</p><p>If you're interested in learning more about Fiber, check out the <a href="/docs/intro">documentation</a> or
join the <a href="https://discord.gg/J4KNdeCYGX" target="_blank" rel="noopener noreferrer">Discord</a>. We will be posting more stories like these,
follow us on Twitter for updates <a href="https://twitter.com/chainbound_" target="_blank" rel="noopener noreferrer">@chainbound_</a>!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="references">References<a class="hash-link" href="#references" title="Direct link to heading">​</a></h2><ol><li><a href="https://ethernodes.org/networkType/Hosting" target="_blank" rel="noopener noreferrer">https://ethernodes.org/networkType/Hosting</a></li><li>In reality, the full message is only broadcast to a subset of peers, whereas the rest receive only the hash <strong>announcement</strong>.
It's up to these nodes to check if they've already received the transaction, and otherwise they have to request
it. This introduces another round trip. See the devp2p specificiation on transaction exchange: <a href="https://github.com/ethereum/devp2p/blob/master/caps/eth.md#transaction-exchange" target="_blank" rel="noopener noreferrer">https://github.com/ethereum/devp2p/blob/master/caps/eth.md#transaction-exchange</a></li></ol>]]></content:encoded>
            <category>ethereum</category>
            <category>devp2p</category>
        </item>
    </channel>
</rss>