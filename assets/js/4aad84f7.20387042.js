"use strict";(self.webpackChunkfiber_website=self.webpackChunkfiber_website||[]).push([[926],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,h=d["".concat(i,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(h,l(l({ref:t},c),{},{components:n})):r.createElement(h,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(7294),a=n(6010);const o="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,l),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var r=n(7462),a=n(7294),o=n(6010),l=n(2389),s=n(7392),i=n(7094),u=n(2466);const c="tabList__CuJ",p="tabItem_LNqP";function d(e){var t;const{lazy:n,block:l,defaultValue:d,values:m,groupId:h,className:b}=e,f=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=m??f.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),y=(0,s.l)(k,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===d?d:d??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==g&&!k.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:w}=(0,i.U)(),[T,N]=(0,a.useState)(g),I=[],{blockElementScrollPositionUntilNextRender:x}=(0,u.o5)();if(null!=h){const e=v[h];null!=e&&e!==T&&k.some((t=>t.value===e))&&N(e)}const E=e=>{const t=e.currentTarget,n=I.indexOf(t),r=k[n].value;r!==T&&(x(t),N(r),null!=h&&w(h,String(r)))},O=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=I.indexOf(e.currentTarget)+1;n=I[t]??I[0];break}case"ArrowLeft":{const t=I.indexOf(e.currentTarget)-1;n=I[t]??I[I.length-1];break}}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":l},b)},k.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>I.push(e),onKeyDown:O,onFocus:E,onClick:E},l,{className:(0,o.Z)("tabs__item",p,null==l?void 0:l.className,{"tabs__item--active":T===t})}),n??t)}))),n?(0,a.cloneElement)(f.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function m(e){const t=(0,l.Z)();return a.createElement(d,(0,r.Z)({key:String(t)},e))}},3378:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>u,toc:()=>p});var r=n(7462),a=(n(7294),n(3905)),o=n(5488),l=n(5162);const s={sidebar_position:7,title:"FiberGuard"},i=void 0,u={unversionedId:"usage/fiber-guard",id:"usage/fiber-guard",title:"FiberGuard",description:"On the consensus layer (eth2) network, we offer direct peering connections to our nodes. As a result,",source:"@site/docs/usage/fiber-guard.mdx",sourceDirName:"usage",slug:"/usage/fiber-guard",permalink:"/docs/usage/fiber-guard",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usage/fiber-guard.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"FiberGuard"},sidebar:"tutorialSidebar",previous:{title:"Mempool Injector",permalink:"/docs/usage/fiber-inject"},next:{title:"Regions",permalink:"/docs/regions"}},c={},p=[{value:"Requirements",id:"requirements",level:2},{value:"Fiber Multiaddress",id:"fiber-multiaddress",level:3},{value:"Static Peer ID",id:"static-peer-id",level:3},{value:"Setting Up",id:"setting-up",level:2},{value:"Checking the Connection",id:"checking-the-connection",level:2}],d={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"On the consensus layer (eth2) network, we offer direct peering connections to our nodes. As a result,\nyour connected beacon node will receive blocks over the P2P connection as soon as our network sees them.\nThis can result in a significant latency decrease compared to the standard P2P network: anywhere from\n500ms to 2 seconds. For more information about FiberGuard, check out ",(0,a.kt)("a",{parentName:"p",href:"../use-cases#31-fiberguard"},"this section in the use cases"),"."),(0,a.kt)("h2",{id:"requirements"},"Requirements"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"We assume that you've signed up for the FiberGuard plan and we have your peer ID and ENR registered in our system.")),(0,a.kt)("h3",{id:"fiber-multiaddress"},"Fiber Multiaddress"),(0,a.kt)("p",null,"Once you've signed up for the plan, you will have received the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.libp2p.io/concepts/fundamentals/addressing/"},"multiaddress")," of\none of our nodes based on your location. A multiaddress looks like this: ",(0,a.kt)("inlineCode",{parentName:"p"},"/ip4/151.150.191.80/tcp/9000/p2p/16Ui...aXRz"),". This\nmultiaddress encodes the network information (IP address and TCP port), as well as the P2P peer ID (",(0,a.kt)("inlineCode",{parentName:"p"},"16Ui...aXRz"),")."),(0,a.kt)("h3",{id:"static-peer-id"},"Static Peer ID"),(0,a.kt)("p",null,"Ideally, you have configured your node with a static peer ID so we don't have to go through the process of registering\nyour information every time you restart your beacon node. Instructions on how to do that for the major consensus clients can\nbe found below:"),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"lighthouse",label:"Lighthouse",mdxType:"TabItem"},(0,a.kt)("p",null,"Enabled by default.")),(0,a.kt)(l.Z,{value:"prysm",label:"Prysm",mdxType:"TabItem"},(0,a.kt)("p",null,"Add the following CLI option to the startup command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"--p2p-static-id\n"))),(0,a.kt)(l.Z,{value:"teku",label:"Teku",mdxType:"TabItem"},(0,a.kt)("p",null,"Enabled by default.")),(0,a.kt)(l.Z,{value:"nimbus",label:"Nimbus",mdxType:"TabItem"},(0,a.kt)("p",null,"Specify a file that contains a private key using the following option:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"--netkey-file <path/to/file.json>\n")))),(0,a.kt)("h2",{id:"setting-up"},"Setting Up"),(0,a.kt)("p",null,"For ensuring the most reliable connection, your beacon node should add the Fiber peer as a static and trusted peer.\n",(0,a.kt)("strong",{parentName:"p"},"Static")," means the connection will always be retried on failure. ",(0,a.kt)("strong",{parentName:"p"},"Trusted")," means the peer is safe from any peer\nscoring systems or pruning routines. Below we outline how to do this for the different consensus clients:"),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"lighthouse",label:"Lighthouse",mdxType:"TabItem"},(0,a.kt)("p",null,"Lighthouse requires 2 options to be set.\nStatic multiaddress:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"--libp2p-addresses <MULTIADDR>\n")),(0,a.kt)("p",null,"Trusted peer:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"--trusted-peers <PEER_ID>\n"))),(0,a.kt)(l.Z,{value:"prysm",label:"Prysm",mdxType:"TabItem"},(0,a.kt)("p",null,"With Prysm, you can add a trusted, static peer with the following flag:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"--peer <MULTIADDR>\n"))),(0,a.kt)(l.Z,{value:"teku",label:"Teku",mdxType:"TabItem"},(0,a.kt)("p",null,"Teku provides multiple ways to add a static, trusted peer: ",(0,a.kt)("a",{parentName:"p",href:"https://docs.teku.consensys.net/development/reference/cli#p2p-static-peers"},"https://docs.teku.consensys.net/development/reference/cli#p2p-static-peers"),". "),(0,a.kt)("p",null,"The easiest way is to add the following CLI flag to the startup command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"--p2p-static-peers=<MULTIADDR>\n"))),(0,a.kt)(l.Z,{value:"nimbus",label:"Nimbus",mdxType:"TabItem"},(0,a.kt)("p",null,"With Nimbus, you can add a trusted, static peer with the following flag:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"--direct-peer <MULTIADDR>\n")))),(0,a.kt)("h2",{id:"checking-the-connection"},"Checking the Connection"),(0,a.kt)("p",null,"If everything went well, your beacon node should now be connected to our Fiber node. You can check the connection status\nby querying the beacon API (usually on port 5052)."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"curl localhost:5052/eth/v1/node/peers/<PEER_ID>\n")),(0,a.kt)("p",null,"where ",(0,a.kt)("inlineCode",{parentName:"p"},"<PEER_ID>")," is the peer ID of the Fiber node."),(0,a.kt)("p",null,"The response should indicate a ",(0,a.kt)("inlineCode",{parentName:"p"},"connected")," state like in the example response below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "peer_id": "QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N",\n    "enr": "enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8",\n    "last_seen_p2p_address": "/ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N",\n    "state": "connected",\n    "direction": "outbound"\n  }\n}\n')))}m.isMDXComponent=!0}}]);