"use strict";(self.webpackChunkfiber_website=self.webpackChunkfiber_website||[]).push([[199],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>b});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(n),b=r,d=m["".concat(l,".").concat(b)]||m[b]||p[b]||o;return n?a.createElement(d,i(i({ref:t},u),{},{components:n})):a.createElement(d,i({ref:t},u))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(6010);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>b});var a=n(7462),r=n(7294),o=n(6010),i=n(2389),s=n(7392),l=n(7094),c=n(2466);const u="tabList__CuJ",p="tabItem_LNqP";function m(e){var t;const{lazy:n,block:i,defaultValue:m,values:b,groupId:d,className:h}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=b??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),g=(0,s.l)(k,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===m?m:m??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==y&&!k.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:w}=(0,l.U)(),[x,T]=(0,r.useState)(y),N=[],{blockElementScrollPositionUntilNextRender:C}=(0,c.o5)();if(null!=d){const e=v[d];null!=e&&e!==x&&k.some((t=>t.value===e))&&T(e)}const _=e=>{const t=e.currentTarget,n=N.indexOf(t),a=k[n].value;a!==x&&(C(t),T(a),null!=d&&w(d,String(a)))},E=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=N.indexOf(e.currentTarget)+1;n=N[t]??N[0];break}case"ArrowLeft":{const t=N.indexOf(e.currentTarget)-1;n=N[t]??N[N.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":i},h)},k.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:e=>N.push(e),onKeyDown:E,onFocus:_,onClick:_},i,{className:(0,o.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":x===t})}),n??t)}))),n?(0,r.cloneElement)(f.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==x})))))}function b(e){const t=(0,i.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},27:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>b,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),o=n(5488),i=n(5162);const s={sidebar_position:1,title:"Streams Subscription"},l=void 0,c={unversionedId:"usage/streams_sub",id:"usage/streams_sub",title:"Streams Subscription",description:"Transactions - subscribeNewTxs",source:"@site/docs/usage/streams_sub.mdx",sourceDirName:"usage",slug:"/usage/streams_sub",permalink:"/docs/usage/streams_sub",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usage/streams_sub.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Streams Subscription"},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/usage/getting-started"},next:{title:"Transactions Broadcasting",permalink:"/docs/usage/transaction_broad"}},u={},p=[{value:"Transactions - <code>subscribeNewTxs</code>",id:"transactions---subscribenewtxs",level:2},{value:"Filtering",id:"filtering",level:3},{value:"Blocks - <code>subscribeNewBlocks</code>",id:"blocks---subscribenewblocks",level:2},{value:"Execution Payload Filter",id:"execution-payload-filter",level:3}],m={toc:p};function b(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"transactions---subscribenewtxs"},"Transactions - ",(0,r.kt)("inlineCode",{parentName:"h2"},"subscribeNewTxs")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This method opens a subscription in the form of a gRPC stream\nand broadcasts pending transaction that the node receives, either from the Fibernet or from full nodes\nit's connected to.")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The transactions on this stream ",(0,r.kt)("strong",{parentName:"p"},"have not been validated"),", and in some cases they can be invalid,\nso we recommend having a process for filtering out invalid transactions."),(0,r.kt)("p",{parentName:"admonition"},"The reason Fiber does this is to not introduce any latency in the message path, ensuring fastest possible delivery.")),(0,r.kt)("p",null,"Let's look at how users can subscribe to the ",(0,r.kt)("strong",{parentName:"p"},"pending transactions")," stream:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"We're omitting the connection code snipped,\nbut your client needs to be connected to Fiber first.")),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"go",label:"Golang",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "context"\n    "log"\n    "time"\n\n    fiber "github.com/chainbound/fiber-go"\n)\n\nfunc main() {\n    ...\n\n    // First make a sink channel on which to receive the transactions\n    ch := make(chan *fiber.Transaction)\n    go func() {\n        // This is a blocking call, so it needs to run in a Goroutine\n        if err := client.SubscribeNewTxs(nil, ch); err != nil {\n            log.Fatal(err)\n        }\n    }()\n\n    // Listen for incoming transactions\n    for tx := range ch {\n        handleTransaction(tx)\n    }\n}\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The transaction type we use here (",(0,r.kt)("inlineCode",{parentName:"p"},"fiber.Transaction"),"), contains all possible fields of all the different transaction types. You can differentiate them\nwith the ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," field. There's also a helper method to convert this transaction to a ",(0,r.kt)("inlineCode",{parentName:"p"},"go-ethereum.types.Transaction")," type, which you can do with\n",(0,r.kt)("inlineCode",{parentName:"p"},"toNative()"),"."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-go"},"...\n\nfor tx := range ch {\n    nativeTx := tx.ToNative()\n    handleGethTransaction(nativeTx)\n}\n")))),(0,r.kt)(i.Z,{value:"rs",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use fiber::Client;\n\n#[tokio::main]\nasync fn main() {\n    // Client needs to be mutable\n    let mut client = Client::connect(\n        "beta.fiberapi.io:8080".to_string(),\n        "YOUR_API_KEY".to_string()\n    ).await.unwrap();\n\n    let mut sub = client.subscribe_new_txs(None).await;\n\n    // Consume the stream\n    while let Some(tx) = sub.next().await {\n        handle_transaction(tx);\n    }\n}\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The stream yields transactions that are ",(0,r.kt)("inlineCode",{parentName:"p"},"ethers::types::Transaction")," types from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gakonst/ethers-rs"},"ethers-rs")," crate."))),(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { Client, TxFilter, hexToBytes } from 'fiber-ts';\nimport { TypedTransaction } from '@ethereumjs/tx';\n\n...\n\nconst sub = client.subscribeNewTxs();\n\nsub.on(\"data\", (tx: TypedTransaction) => {\n    handleTx(tx);\n});\n"))),(0,r.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'try:\n  sub = client.subscribe_new_txs()\n\n  # Iterate over transaction stream\n  for tx in sub:\n    do_something(tx)\nexcept Exception as e:\n  print("error subscribing", e)\n')))),(0,r.kt)("h3",{id:"filtering"},"Filtering"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"subscribe")," methods allows for parameters which allow users to ",(0,r.kt)("strong",{parentName:"p"},"filter the transactions they receive."),"\nCurrently, we support filtering on the following transaction fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sender"),(0,r.kt)("li",{parentName:"ul"},"Receiver"),(0,r.kt)("li",{parentName:"ul"},"MethodID"),(0,r.kt)("li",{parentName:"ul"},"Value (greater than)")),(0,r.kt)("p",null,"Here few examples to show how to use these filters:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"go",label:"Golang",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "context"\n    "log"\n    "time"\n\n    fiber "github.com/chainbound/fiber-go"\n)\n\nfunc main() {\n    ...\n\n    // Construct filter\n    // example 1: all transactions with either of these addresses as the receiver\n    f := filter.New(filter.Or(\n        filter.To("0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"),\n        filter.To("0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"),\n    ))\n\n    // example 2: all transactions with a value greater than 1 ETH\n    f := filter.New(filter.Value(big.NewInt(1) * big.NewInt(1e18)))\n\n    // example 3: all ERC20 transfers on the 2 tokens below\n    f := filter.New(filter.And(\n        filter.MethodID("0xa9059cbb"),\n        filter.Or(\n            filter.To("0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"),\n            filter.To("0xdAC17F958D2ee523a2206206994597C13D831ec7"),\n        ),\n    ))\n\n    ch := make(chan *fiber.Transaction)\n    go func() {\n        // apply filter\n        if err := client.SubscribeNewTxs(f, ch); err != nil {\n            log.Fatal(err)\n        }\n    }()\n\n    // Listen for incoming transactions\n    for tx := range ch {\n        handleTransaction(tx)\n    }\n}\n'))),(0,r.kt)(i.Z,{value:"rs",label:"Rust",mdxType:"TabItem"},(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Constructing filters with the Rust package is not very ergonomic yet. We're working on using macros to improve this process.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use fiber::Client;\n\n#[tokio::main]\nasync fn main() {\n    // Client needs to be mutable\n    let mut client = Client::connect(\n        "beta.fiberapi.io:8080".to_string(),\n        "YOUR_API_KEY".to_string()\n    ).await.unwrap();\n\n    // Construct filter\n    // example 1: simple receiver filter\n    let f = Filter::new()\n                .to("0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D");\n\n    // example 2: all transactions with either of these addresses as the receiver\n    let f = Filter::new()\n                .or() // creates a new \'OR\' level\n                  .to("0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48")\n                  .to("0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D");\n\n    // example 3: all ERC20 transfers on the 2 tokens below\n    let f = Filter::new()\n                .and()\n                  .method_id("0xa9059cbb")\n                  .or()\n                    .to("0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48")\n                    .to("0xdAC17F958D2ee523a2206206994597C13D831ec7");\n\n    // Encode the filter\n    let mut sub = client.subscribe_new_txs(f.encode().unwrap()).await;\n\n    // Consume the stream\n    while let Some(tx) = sub.next().await {\n        handle_transaction(tx);\n    }\n}\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The stream yields transactions that are ",(0,r.kt)("inlineCode",{parentName:"p"},"ethers::types::Transaction")," types from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gakonst/ethers-rs"},"ethers-rs")," crate."))),(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("p",null,"\ud83d\udea7 WIP \ud83d\udea7")),(0,r.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("p",null,"\ud83d\udea7 WIP \ud83d\udea7"))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},'Evaluating filters will introduce anywhere from 10 to 200 microseconds, depending on the complexity of the filter.\nThere\'s currently a limit of 16 filter elements or "nodes" in the filter tree.')),(0,r.kt)("h2",{id:"blocks---subscribenewblocks"},"Blocks - ",(0,r.kt)("inlineCode",{parentName:"h2"},"subscribeNewBlocks")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This method opens a subscription in the form of a gRPC stream and broadcasts ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconblock"},(0,r.kt)("strong",{parentName:"a"},"beacon blocks")),".\nThese blocks contain the full consensus (eth2) data.")),(0,r.kt)("p",null,"Let's see how to subscribe to new blocks in the different packages:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"go",label:"Golang",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    ...\n    fiber "github.com/chainbound/fiber-go"\n)\n\nfunc main() {\n    ...\n\n    ch := make(chan *fiber.Block)\n\n    go func() {\n        if err := client.SubscribeNewBlocks(ch); err != nil {\n            log.Fatal(err)\n        }\n    }()\n\n    for block := range ch {\n        handleBlock(block)\n    }\n}\n'))),(0,r.kt)(i.Z,{value:"rs",label:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use fiber::Client;\n\n#[tokio::main]\nasync fn main() {\n    let mut client = Client::connect(\n        "beta.fiberapi.io:8080".to_string(),\n        "API_KEY".to_string()\n    ).await.unwrap();\n\n    let mut sub = client.subscribe_new_blocks().await;\n\n    // Consume the stream\n    while let Some(block) = sub.next().await {\n        handle_block(tx);\n    }\n}\n'))),(0,r.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { Block } from "fiber-ts";\n\n...\n\nconst sub = client.subscribeNewBlocks();\n\nsub.on("data", (block: Block) => {\n  handleBlock(block);\n});\n'))),(0,r.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'try:\n  sub = client.subscribe_new_blocks()\n\nfor block in sub:\ndo_something(block)\nexcept Exception as e:\nprint("error subscribing", e)\n')))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Blocks streamed are not ",(0,r.kt)("strong",{parentName:"p"},"finalized"),", meaning that the data is not guaranteed to be part of the canonical chain. Recent blocks can always be ",(0,r.kt)("a",{parentName:"p",href:"https://www.paradigm.xyz/2021/07/ethereum-reorgs-after-the-merge"},"reorged"),".")),(0,r.kt)("h3",{id:"execution-payload-filter"},"Execution Payload Filter"),(0,r.kt)("p",null,"A stream of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#executionpayload"},(0,r.kt)("strong",{parentName:"a"},"execution payloads")),".\nThese payloads are part of the beacon block, but they are only concerned with the execution layer (eth1). They contain\nthe traditional ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#executionpayloadheader"},"block header"),"\nand the full list of transactions."))}b.isMDXComponent=!0}}]);