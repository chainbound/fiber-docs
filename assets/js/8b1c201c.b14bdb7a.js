"use strict";(self.webpackChunkfiber_website=self.webpackChunkfiber_website||[]).push([[9896],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9238:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:3,title:"Streams"},i=void 0,s={unversionedId:"usage/streams",id:"usage/streams",title:"Streams",description:"Fiber offers both transaction and block streams.",source:"@site/docs/usage/streams.md",sourceDirName:"usage",slug:"/usage/streams",permalink:"/docs/usage/streams",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usage/streams.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Streams"},sidebar:"tutorialSidebar",previous:{title:"API Design",permalink:"/docs/usage/api"},next:{title:"Tracing",permalink:"/docs/usage/tracing"}},l={},c=[{value:"Transaction Stream",id:"transaction-stream",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Example: getting all USDC and USDT transfers",id:"example-getting-all-usdc-and-usdt-transfers",level:4},{value:"Block Streams",id:"block-streams",level:2},{value:"Execution Payload Stream",id:"execution-payload-stream",level:3},{value:"Beacon Block Stream",id:"beacon-block-stream",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Fiber offers both transaction and block streams."),(0,r.kt)("h2",{id:"transaction-stream"},"Transaction Stream"),(0,r.kt)("p",null,"The transaction stream provides ",(0,r.kt)("strong",{parentName:"p"},"low-latency access to all new transactions seen by the Fiber Network"),".\nBecause we want very low latency, ",(0,r.kt)("strong",{parentName:"p"},"Fiber doesn't validate these transactions against EVM state"),". Each node contains a simple transaction pool to drop duplicates, and validates the signature of incoming transactions, but that's all. This is something\nthe user should keep in mind!"),(0,r.kt)("p",null,"The transaction stream contains ",(0,r.kt)("strong",{parentName:"p"},"full transactions"),", and the client implementations will usually convert these transactions\nto a popular library implementation, like an ",(0,r.kt)("inlineCode",{parentName:"p"},"ethers-rs")," transaction in Rust or an ",(0,r.kt)("inlineCode",{parentName:"p"},"@ethereumjs/tx")," ",(0,r.kt)("inlineCode",{parentName:"p"},"TypedTransaction")," in JavaScript."),(0,r.kt)("h2",{id:"filtering"},"Filtering"),(0,r.kt)("p",null,"Usually, users are only interested in specific transactions, which is why Fiber offers ",(0,r.kt)("strong",{parentName:"p"},"transaction filters"),".\nCurrently, you can filter based on the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Sender"),(0,r.kt)("li",{parentName:"ul"},"Receiver"),(0,r.kt)("li",{parentName:"ul"},"MethodID"),(0,r.kt)("li",{parentName:"ul"},"Value")),(0,r.kt)("p",null,"You can build complex filters using ",(0,r.kt)("inlineCode",{parentName:"p"},"AND")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"OR")," operators. Let's look an example."),(0,r.kt)("h4",{id:"example-getting-all-usdc-and-usdt-transfers"},"Example: getting all USDC and USDT transfers"),(0,r.kt)("p",null,"To transfer an ERC20 token, you call the ",(0,r.kt)("inlineCode",{parentName:"p"},"Transfer")," method, which has the following method ID: ",(0,r.kt)("inlineCode",{parentName:"p"},"0xa9059cbb"),".\nWe want USDC and USDT transfers, so we filter the ",(0,r.kt)("inlineCode",{parentName:"p"},"To")," field on either of the addresses. In string format,\nit would look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'METHOD_ID == "0xa9059cbb" AND (TO == "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48" OR TO == "0xdAC17F958D2ee523a2206206994597C13D831ec7")\n')),(0,r.kt)("p",null,"The client implementations offer easy-to-use interfaces for constructing filters.\nUsing the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/chainbound/fiber-go"},"Go client")," as an example, we can construct a filter like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'f := filter.New(\n    filter.And(\n        filter.MethodID("0xa9059cbb"),\n        filter.Or(\n            filter.To("0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"),\n            filter.To("0xdAC17F958D2ee523a2206206994597C13D831ec7"),\n        ),\n    ),\n)\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},'Evaluating filters will introduce anywhere from 10 to 200 microseconds, depending on the complexity of the filter.\nThere\'s currently a limit of 16 filter elements or "nodes" in the filter tree.')),(0,r.kt)("h2",{id:"block-streams"},"Block Streams"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Both streams below are not ",(0,r.kt)("strong",{parentName:"p"},"finalized"),", meaning that the data is not guaranteed to be part of the canonical chain. Recent blocks can always be ",(0,r.kt)("a",{parentName:"p",href:"https://www.paradigm.xyz/2021/07/ethereum-reorgs-after-the-merge"},"reorged"),".")),(0,r.kt)("h3",{id:"execution-payload-stream"},"Execution Payload Stream"),(0,r.kt)("p",null,"A stream of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#executionpayload"},(0,r.kt)("strong",{parentName:"a"},"execution payloads")),". These payloads are part of the beacon block, but they are only concerned with the execution layer (eth1). They contain\nthe traditional ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#executionpayloadheader"},"block header")," and the full list of transactions."),(0,r.kt)("h3",{id:"beacon-block-stream"},"Beacon Block Stream"),(0,r.kt)("p",null,"A stream of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconblock"},(0,r.kt)("strong",{parentName:"a"},"beacon blocks")),". These blocks contain the full consensus (eth2) data."))}u.isMDXComponent=!0}}]);