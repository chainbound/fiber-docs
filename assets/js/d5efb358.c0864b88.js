"use strict";(self.webpackChunkfiber_website=self.webpackChunkfiber_website||[]).push([[778],{3905:(e,t,a)=>{a.d(t,{Zo:()=>b,kt:()=>p});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),f=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},b=function(e){var t=f(e.components);return n.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},l=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),l=f(a),p=r,u=l["".concat(d,".").concat(p)]||l[p]||s[p]||o;return a?n.createElement(u,i(i({ref:t},b),{},{components:a})):n.createElement(u,i({ref:t},b))}));function p(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=l;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var f=2;f<o;f++)i[f]=a[f];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}l.displayName="MDXCreateElement"},9213:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>c,toc:()=>f});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:5,title:"Tracing"},i=void 0,c={unversionedId:"usage/tracing",id:"usage/tracing",title:"Tracing",description:"Tracing can be very useful for seeing where certain transactions originated as well as how fast they propagated. Fiber has",source:"@site/docs/usage/tracing.md",sourceDirName:"usage",slug:"/usage/tracing",permalink:"/docs/usage/tracing",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usage/tracing.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Tracing"},sidebar:"tutorialSidebar",previous:{title:"Streams",permalink:"/docs/usage/streams"},next:{title:"Mempool Injector",permalink:"/docs/usage/fiber-inject"}},d={},f=[{value:"Usage",id:"usage",level:3}],b={toc:f};function s(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},b,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Tracing can be very useful for seeing where certain transactions originated as well as how fast they propagated. Fiber has\nan API that will show you the exact path a transaction took through the network. You can use our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/chainbound/cbctl"},(0,r.kt)("inlineCode",{parentName:"a"},"cbctl"))," CLI tool to access the API."),(0,r.kt)("p",null,"To clarify, this is how you would trace a transaction with ",(0,r.kt)("inlineCode",{parentName:"p"},"cbctl"),":"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Command")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cbctl fiber trace tx --hash 0xaa04f9b21ad55393eac0343e4c162be56cdc54f15f7abc59dfecca347635ec9f --show-source\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Timestamp       Node ID                 Region                  Observation Type        Source\n[1683552246359] fiber-node-tzqfmUHX     (eu-central-1)          p2p                     enode://0xc4702653ad608e49f36a292e87d4299e34c69ee5a8d79c1f06c5e76a2941e682ca25b974e97b5165d3ce164c37098819fe9821a3c01fe8c0adc4cc697d7e0cda@144.76.79.170:30303\n[1683552246359] fiber-node-UBUhZvC3     (eu-central-1)          fiber                   fiber-node-tzqfmUHX-eu-central-1\n[1683552246361] fiber-node-UBUhZvC3     (eu-central-1)          p2p                     enode://0xa039a887e07e8899c308b94bc77c9d6a8c3fa589a0191646bb6a5f42c471bad9f8ea545d3a8d2f3ff03a9c7edb6c0f056dac2d485064a948bbac50742df5da0b@3.68.227.119:30303\n[1683552246364] fiber-node-1FNltdeP     (eu-west-3)             fiber                   fiber-node-tzqfmUHX-eu-central-1\n[1683552246368] fiber-node-uy91LhSB     (eu-west-2)             fiber                   fiber-node-UBUhZvC3-eu-central-1\n[1683552246375] fiber-node-1FNltdeP     (eu-west-3)             p2p                     enode://0x9a6808b872cdef7d153aaf26e4447f27499b367f44121068d36d38e4829e336df2a32acf9088ba1a07952016abeea92e58368338b73406a178e751c56335b5b5@81.249.172.138:30403\n[1683552246376] fiber-node-uy91LhSB     (eu-west-2)             p2p                     enode://0xbcfb491c00fd1a6577311cf96c40165c1e70450968a10f920bc8900f1d6042db0dc6555064333ec153cc147a9d665d410f905383aa1b022d6e4878139e85c858@13.36.234.254:30303\n[1683552246401] fiber-node-uxXKJltD     (us-east-1)             p2p                     enode://0x11dfc468e1370365058f8024e371b9fdd9fc8b7d7666f14912d8354e2d1e98c1bcb570028fabe9e3a5755df500fe933b58dc41390e0c42bd5b5efbbd2e9f2af8@138.201.137.117:30303\n[1683552246401] fiber-node-vKZvH7Va     (us-east-1)             fiber                   fiber-node-uxXKJltD-us-east-1\n[1683552246401] fiber-node-RrDUEn2O     (us-east-1)             fiber                   fiber-node-uxXKJltD-us-east-1\n[1683552246406] fiber-node-RrDUEn2O     (us-east-1)             p2p                     enode://0xf0177460cedeb39a9e9791e1b93ee510467e9b75052ab4ff6bdbdf273d6c7a1d6db010a39032974f90798415ca284bc400182eef119dbc1b83da2a103478b171@34.229.169.228:30303\n[1683552246406] fiber-node-vKZvH7Va     (us-east-1)             p2p                     enode://0x49def938197d138fccdfd15250e27fa2b423f7ecf560ef9c826a16f8558f9d062b88648e92578ce7e81558ce53832ffd87efe0ae42d191858bbc42f11e70af85@18.234.75.196:30303\n[1683552246406] fiber-node-bp1hdWL3     (us-east-2)             fiber                   fiber-node-uxXKJltD-us-east-1\n[1683552246412] fiber-node-bp1hdWL3     (us-east-2)             p2p                     enode://0x919da281398a13e227b26c21b1747e7d28acf3270eb2a707787961608e21d0e4206b1806b04029eec0a75933a08ad730359184e6005dc4245b6c2116a1da57d6@44.201.98.188:30303\n[1683552246432] fiber-node-rvrbVEEN     (us-west-1)             fiber                   fiber-node-uxXKJltD-us-east-1\n[1683552246437] fiber-node-pjjlW9ba     (ap-southeast-1)        fiber                   fiber-node-UBUhZvC3-eu-central-1\n[1683552246439] fiber-node-rvrbVEEN     (us-west-1)             p2p                     enode://0xf8c1c390d373c7d439dbee739213b3529067997b97b8249ba550e8348ad9affafa133c784e40e81aaec535bf88beaebf4f2285561ff7d333282b23b4c9ce2d93@185.171.131.117:30303\n[1683552246441] fiber-node-pjjlW9ba     (ap-southeast-1)        p2p                     enode://0x2976502fd13cc604da9775ae332ed45c13708d5c04677d311085be717a7162ebd7fdfa5659d48b047f38f106810f3293f7beac9649decb74256e65d336da8dce@18.141.166.63:29888\n[1683552246448] fiber-node-yJuuNX1O     (ap-northeast-1)        p2p                     enode://0x1ef5d1c8ea44928c284a2e850647428773d0f2ba02343795dec93f76dedd73949d516e7580666bc1809782ee0acc51e39f8de90520baca31b164840e0cebda99@52.193.254.254:44881\n[1683552246456] fiber-node-YboaGO5a     (ap-east-1)             fiber                   fiber-node-tzqfmUHX-eu-central-1\n[1683552246462] fiber-node-YboaGO5a     (ap-east-1)             p2p                     enode://0xf149cf0fb44e5c493e5f7cd7d2b4841a9faa817d034c1d5394527b8105a296a1ba7e15823b60469dd304f5e50f535076a311a1f29b422ca4407ac45f22bd2049@78.46.174.84:30303\n[1683552246463] fiber-node-hz71Y1Ml     (ap-northeast-2)        p2p                     enode://0x451229d9f219fe1660b8a6959d13a0bbfbed25427a99caa4b5f45a6076e620ad1fa396525be0b643bff974b3762e997864808be9b7b4d9f443b595e290f5273c@3.36.101.198:40216\n")),(0,r.kt)("p",null,"The output is a table of observations with 5 columns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Timestamp"),": the UNIX timestamp in milliseconds."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NodeID"),": the unique ID of the Fiber Node in question."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Region"),": the regions of said Fiber Node."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Observation Type"),": the type of observation. It can be either ",(0,r.kt)("inlineCode",{parentName:"li"},"p2p")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"fiber"),".",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"p2p"),": the observation was from a peer in the p2p network."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fiber"),": the observation was from another node in the Fiber Network."),(0,r.kt)("li",{parentName:"ul"},"We include both types of observations because it can be useful to compare the 2. You can filter by observation type by using the ",(0,r.kt)("inlineCode",{parentName:"li"},"--type")," flag."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Source"),": if received from the p2p network, an enode, otherwise the NodeID of the node we received it from.")),(0,r.kt)("h3",{id:"usage"},"Usage"),(0,r.kt)("p",null,"First, set up ",(0,r.kt)("inlineCode",{parentName:"p"},"cbctl")," by following the instructions ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/chainbound/cbctl#readme"},"here"),"."),(0,r.kt)("p",null,"Then, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"fiber trace tx")," subcommand to trace transactions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'NAME:\n   cbctl fiber trace tx - Trace a transaction\n\nUSAGE:\n   cbctl fiber trace tx [command options] [arguments...]\n\nOPTIONS:\n   --hash value, -H value  The transaction hash to trace\n   --type value, -t value  The observation type to trace (p2p | fiber | all) (default: "all")\n   --private, -p           Whether or not the transaction is private (sent with your API key) (default: false)\n   --show-source, -s       Whether or not to show the source of the transaction (default: false)\n   --help, -h              show help\n')))}s.isMDXComponent=!0}}]);