"use strict";(self.webpackChunkfiber_website=self.webpackChunkfiber_website||[]).push([[9557],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),f=a,b=d["".concat(s,".").concat(f)]||d[f]||u[f]||o;return n?r.createElement(b,i(i({ref:t},p),{},{components:n})):r.createElement(b,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3307:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:6,title:"Mempool Injector"},i=void 0,c={unversionedId:"usage/fiber-inject",id:"usage/fiber-inject",title:"Mempool Injector",description:"Often, it's very useful to inject transactions from Fiber into your local mempool.",source:"@site/docs/usage/fiber-inject.md",sourceDirName:"usage",slug:"/usage/fiber-inject",permalink:"/docs/usage/fiber-inject",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usage/fiber-inject.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Mempool Injector"},sidebar:"tutorialSidebar",previous:{title:"Tracing",permalink:"/docs/usage/tracing"},next:{title:"Regions",permalink:"/docs/regions"}},s={},l=[{value:"Usage",id:"usage",level:2}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Often, it's very useful to inject transactions from Fiber into your local mempool.\nWe offer a Docker image that will help you do that."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -p 8080:8080 --name fiber-inject mempirate/fiber-inject \\\n    fiber-inject \\\n    --fiber-api $API_ENDPOINT \\\n    --fiber-key $YOUR_API_KEY \\\n    --enodes $ENODE1,$ENODE2 \\\n")),(0,a.kt)("p",null,"This will subscribe to the Fiber transaction stream and broadcast all the transactions it receives\nto your local nodes (specified by ",(0,a.kt)("inlineCode",{parentName:"p"},"--enodes"),", provided they're connected)."),(0,a.kt)("p",null,"Your local ",(0,a.kt)("inlineCode",{parentName:"p"},"enode"),"'s IP address should either be the gateway address of your Docker network (usually ",(0,a.kt)("inlineCode",{parentName:"p"},"172.17.0.1"),"), or one of the publicly reachable\nIP addresses of your machine."),(0,a.kt)("p",null,"It's possible that your local node has reached its maximum amount of peers, and therefore won't accept Fiber inject as another peer.\nIf the Docker container doesn't print the following (",(0,a.kt)("inlineCode",{parentName:"p"},"docker logs fiber-inject"),"):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"14:51:44.831 INF [DEVP2P] Connected to trusted peer           enode=...\n")),(0,a.kt)("p",null,"that's probably the case, and you have to add ",(0,a.kt)("inlineCode",{parentName:"p"},"fiber-inject")," as a trusted peer. First we need to expose the p2p port of the Docker container, so you'll have to\nrun it like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -p 8080:8080 -p 30304:30303 --name fiber-inject mempirate/fiber-inject \\\n    fiber-inject \\\n    --fiber-api $API_ENDPOINT \\\n    --fiber-key $YOUR_API_KEY \\\n    --enodes $ENODE1,$ENODE2 \\\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Make sure the mapped port isn't already taken by your local node.")),(0,a.kt)("p",null,"Next, find the ",(0,a.kt)("inlineCode",{parentName:"p"},"enode"),". This should also be printed in the output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"14:51:44.811 INF [DEVP2P] Starting devp2p server               enode=enode://6e45ab02bc08b03da9527ef42e07e12d144eea3365b102b3d7f3b7a3f4ae0aed24a039d346af3a7e0e3c84257458af076e55e8860e262f551dab9d4e472f0fe3@127.0.0.1:30303?discport=0\n")),(0,a.kt)("p",null,"Now add this enode to your local node's trusted peerset, but make sure you use your mapped port as the ",(0,a.kt)("inlineCode",{parentName:"p"},"enode")," port.\nIf you're using geth, you can use the JavaScript console:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"geth attach --datadir $DATADIR --exec \\\n'admin.addTrustedPeer(\"enode://6e45ab02bc08b03da9527ef42e07e12d144eea3365b102b3d7f3b7a3f4ae0aed24a039d346af3a7e0e3c84257458af076e55e8860e262f551dab9d4e472f0fe3@127.0.0.1:30304\")'\n")),(0,a.kt)("p",null,"Now if you check the output, the connection should have been made."))}u.isMDXComponent=!0}}]);